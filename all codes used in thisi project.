import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.read_csv('household_power_consumption.txt', delimiter= ';', header =0, low_memory=False, infer_datetime_format=True, parse_dates={'datetime':[0,1]}, index_col=['datetime'], na_values = '?', dtype = float) 
df.head()

# Handling missing values.
df.isna().sum()
df.replace('?', 'nan',inplace = True)
df.fillna(method = 'ffill', inplace=True)

# add a column for the remainder of sub metering

values = df.values.astype('float32')
df['sub_metering_4'] = ((values[:,0])*1000/60) - (values[:,4] + values[:,5] + values[:,6])

# Downsampling daily
df_daily = df.resample('D').mean()
df_daily.head(10)

# Visualizing the distribition for daily global active power.
df_daily_global_active = df_daily['Global_active_power']
plt.plot(df_daily_global_active)

# the pearson correlation coeficient between Global active power and Global reactive power.

# Import those libraries 
import pandas as pd 
from scipy.stats import pearsonr 
  
# Import your data into Python 
 
  
# Convert dataframe into series 
list1 = df['Global_active_power'] 
list2 = df['Global_reactive_power'] 
  
# Apply the pearsonr() 
corr, _ = pearsonr(list1, list2) 
print('Pearsons correlation: %.2f' % corr)

list3 = df['Voltage'] 
list4 = df['Global_intensity'] 
  
# Apply the pearsonr() 
corr,_ = pearsonr(list3, list4) 
print('Pearsons correlation: %.2f' % corr)

## Making Predictions

from fbprophet import Prophet

# Train test split.
x = len(df_daily)
print('x:', x)
split = x- 365

train = df_daily[0:split]
train.tail()
#len(train)

test = df_daily[split:]
len(test)

df_daily1 = train.reset_index()
df_daily1 = df_daily1[['datetime','Global_active_power']]
df_daily1.head()

new_df = df_daily1.rename(columns={'datetime': 'ds', 'Global_active_power':'y'})
new_df.head()

# Prediction using prophet.
# Predict for the next 12 months.
future = model.make_future_dataframe(periods = 365, freq = 'D')
forecast = model.predict(future)
forecast.tail(20)

model.plot(forecast)
plt.show()

# Evaluate model performance.: 


